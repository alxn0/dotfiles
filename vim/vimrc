" author: Alexandre Naud
" note: design for VIM 8+

" ------------------- General options --------------------------------
set nocompatible    " Disable compatibility with vi
set nobackup        " Do not save backup file
set splitright      " Vertical split on the right
set modifiable      " Make a buffer modifiable...
set history=100     " Command history

" ------------------- Color scheme -----------------------------------
set background=dark
set termguicolors
colorscheme hybrid_alacritty
hi Normal ctermbg=NONE guibg=NONE

" ------------------- Editor options -------------------------
filetype on " Enable filetype detection
filetype plugin on " Load plugins for detected filetype
filetype indent on " Load indent file by filetype

" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"  Ps = 0  -> blinking block.
"  Ps = 1  -> blinking block (default).
"  Ps = 2  -> steady block.
"  Ps = 3  -> blinking underline.
"  Ps = 4  -> steady underline.
"  Ps = 5  -> blinking bar (xterm).
"  Ps = 6  -> steady bar (xterm).
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" numbered lined
set nonumber

" Set textwidth and colored vertical lines
set textwidth=72
set colorcolumn= " Set colored vertical lines (Toggle with F2 at 80)
highlight ColorColumn ctermbg=8

" Set special key (mainly listchars) colors
highlight SpecialKey ctermfg=8

" Indentation
set smartindent "Auto indent in a 'smart' way
set autoindent "automatically indent new lines
set shiftwidth=2 " Autoindent width (>> in normal mode)
set tabstop=2 " Tab width
set expandtab " Use spaces instead of tabs

" Search
set hlsearch  " Highlight words when searched
set incsearch " Highlight incrementally as they are found
nohl          " Avoir highlighting last search when sourcing .vimrc 

" Scrolling
set ttyfast " Faster scrolling

" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Prevent truncated yanks, deletes, etc.
set viminfo='20,<1000,s1000

" Wrap lines
set wrap

" Don't break words when soft wrapping lines according to the current
" windows. Note: Soft break don't add <EOL> 
set linebreak

" Some stuff in vim 8
if v:version >= 800
  set nofixendofline " Don't automatically add <EOF> when missing

  " More useful list characters
  set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>

  set foldmethod=manual " Create fold manualy
  set nofoldenable      " Unfold everything
endif

" ------------------------ Formating when editing -----------------------

" Default formating, this can be changed for specific file type by plugin
" Most of these are skipped when wrap if off (i.e., set nowrap)
set fo-=t " Don't auto-wrap text using textwidth
set fo-=c " Auto-wrap comment using textwidth and insert comment leader
set fo+=r " Automatically insert comment leader after <Enter> (insert mode)
set fo-=o " Don't auto insert comment leader following o/O
set fo+=q " Formating comments with gq
set fo-=w " Don't indicate paragraph with trailing whitespaces
set fo-=a " Don't automatically format paragraph 
set fo-=n " Don't recognized numbered list
set fo-=2 " Don't use the indent of the second line of a paragraph
set fo-=v " Don't use vi-compatible auto-wrapping
set fo-=b " Don't use vi-compatible auto-wrapping
set fo+=l " Long lines are not broken in insert mode
set fo-=m " Don't break multibyte character above 255
set fo+=M " Don't add spaces between multibyte character when joining lines
set fo+=1 " Don't break line after a one-letter word
set fo+=j " When it make sense, remove comment leader when joining lines
set fo+=p " Don't break lines at single spaces that follow periods (prose...)

" --------------------- Formating on save or exit ---------------------------

" Remove trailing whitespace in python and R when save
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.R :%s/\s\+$//e
autocmd BufWritePre *.r :%s/\s\+$//e

" ----------------------- File format ----------------------------------

" Read keg as yaml
au bufnewfile,bufRead keg set ft=yaml

" ------------------------ Completion ---------------------------
"" Command line completion
set wildmenu " Enable auto completion menu
set wildmode=list:longest " Make wild menu behave like bash

"" Omni completion (To better work with lsp)
set completeopt-=preview " Don't show preview window
set completeopt+=popup " Use popup menu for completion preview
set completepopup+=width:80
set completepopup+=highlight:Pmenu
set completepopup+=align:item
set completepopup+=border:off

"" Use <C-Space> to trigger completion
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
\ "\<lt>C-n>" :
\ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
\ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
\ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>
" -------------------------- Mouse ------------------------------
set mouse=a " Mouse enable in all modes

" -------------------------- Mappings ---------------------------

" Set leader keys
let mapleader = ';'
let maplocalleader = ','

" Yank to end of line (behave as D and C)
nnoremap Y y$

" Yank to system clipboard
" Assume xclip is installed (and being on X11)
" Don't understand why <C-Y> does not work instead of <leader>y
vnoremap <leader>y :w !xclip -sel clip<Cr><Cr>
nnoremap <C-P> :r !xclip -o -sel clip<Cr>

" Yank/paste to/from tmux clipboard
" DOES NOT WORK
"vnoremap <C-y> y<cr>:call system("tmux load-buffer -", @0)<cr>gv
"nnoremap <C-p> :let @0 = system("tmux save-buffer -")<cr>"0p<cr>g;

" Quit terminal mode
tnoremap <Esc> <C-\><C-n>

" Disable search highlighting when refreshing screen
nnoremap <C-L> :nohl<CR><C-L> 

" Edit / Source .vimrc
nnoremap <leader>re :e ~/.vimrc<CR>
nnoremap <leader>rs :so ~/.vimrc<CR>

" Open a terminal on the right
nnoremap <leader>t :vertical botright term<CR>

" Navigation
nmap <silent> <C-down> :wincmd j<CR>
nmap <silent> <C-up> :wincmd k<CR>
nmap <silent> <C-left> :wincmd h<CR>
nmap <silent> <C-right> :wincmd l<CR>

" Function keys
map <F1> :set number!<CR>
nnoremap <F2> :execute "set colorcolumn=" . (&colorcolumn == "" ? "80" : "")<CR>
map <F3> :set list!<CR>
map <F4> :set spell!<CR>
map <F5> :set paste!<CR>

" Disable arrow keys for muscle memory
noremap <up> :echoerr "Umm, use k instead"<CR>
noremap <down> :echoerr "Umm, use j instead"<CR>
noremap <left> :echoerr "Umm, use h instead"<CR>
noremap <right> :echoerr "Umm, use l instead"<CR>

" Extreme mode!!!!
" inoremap <up> <NOP>
" inoremap <down> <NOP>
" inoremap <left> <NOP>
" inoremap <right> <NOP>

" Navigate between display lines in markdown 
au FileType markdown noremap j gj
au FileType markdown noremap k gk

" Netrw
nnoremap <leader>e :Lexplore<CR>
" ------------------------ Status line --------------------------
" Need to change highlight groups base on the color scheme
set laststatus=2

set statusline=
set statusline+=%#Directory#               " Directory color
set statusline+=\ %{expand('%:p:h:t')}/%t  " File name with parent directory
"set statusline+=\ %f                      " The path relative to current dir
set statusline+=%m                         " Save status (modification)
set statusline+=%#WarningMsg#              " Warning color
set statusline+=%r                         " Read only flag
set statusline+=%#LineNr#                  " Line number color
set statusline+=%=                         " Align right (following stuff)
set statusline+=%y                         " File type
set statusline+=\                          " White space

" Encoding with warning if not UTF-8
set statusline+=%#WarningMsg#%6{(&fenc!='utf-8'&&&fenc!='')?''.&fenc.'':''}
set statusline+=%#LineNr#%6{(&fenc=='utf-8'&&&fenc!='')?''.&fenc.'':''}

" File format with warning if not unix
set statusline+=%#Warningmsg#%{&ff!='unix'?':'.&ff.'':''}
set statusline+=%#LineNr#%{&ff=='unix'?':'.&ff.'':''}

set statusline+=%#LineNr#               " Line number color
set statusline+=\ %4l,%c                  " Line, columns
set statusline+=\ %4p%%                   " File percent

" -------------------------- Plugins ----------------------------
" Only load plugins if Plug detected
if filereadable(expand('~/.vim/autoload/plug.vim'))
  
  call plug#begin()
    Plug 'mbbill/undotree'							 " Undo tree
    Plug 'jpalardy/vim-slime'            " REPL for vim
    Plug 'dense-analysis/ale'            " Asychronous Lint Engine
    Plug 'github/copilot.vim'            " GitHub copilot
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    if v:version >= 900
      Plug 'yegappan/lsp'               " Language Server Protocol
    endif
  call plug#end()

  " ----------------- Undo tree -------------------
  nnoremap <leader>u :UndotreeToggle<CR>

  " ----------------- vim-slime -------------------
  let g:slime_target = 'tmux'
  let g:slime_ipython = 0
  let g:slime_bracketed_paste = 1

  xmap <space> <Plug>SlimeRegionSend
  nmap <space> <Plug>SlimeParagraphSend

  "------------- ALE ---------------------
  " Disable ALE's language server
  let g:ale_disable_lsp = 1

  "Define when to lint"
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_insert_leave = 1
  let g:ale_lint_on_text_change = 'never'

  "Show linting errors with highlights" 
  "* Can also be viewed in the loclist with :lope"
  let g:ale_set_signs = 1
  let g:ale_set_highlights = 1
  let g:ale_virtualtext_cursor = 1
  highlight ALEError ctermbg=none cterm=underline

  " Set linters
  let b:ale_linters = {
        \ 'python': ['ruff'],
        \ 'r':['lintr'],
        \ 'sh': ['shellcheck'],
        \}

  " Set fixers
  let b:ale_fixers = {
        \ 'python': ['ruff'],
        \ 'r': ['styler'],
        \}

  " Stop annoying R lintr 
  "autocmd FileType r ALEToggleBuffer
  
  " Set signs
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'

  " Key mapping
  nnoremap <leader>at :ALEToggle<CR>
  nnoremap <leader>af :ALEFix<CR>

  "------------ Copilot -----------------
  "" Which file type
  let g:copilot_filetypes = {
    \ 'gitcommit': v:true,
    \ 'markdown': v:false,
    \ 'conf': v:false,
    \ 'yaml': v:false,
    \ 'python': v:true,
    \ 'r': v:true,
    \ 'sh': v:true,
    \ 'vim': v:true
    \ }

  "" Avoid copilot in file > 100kb
  autocmd BufReadPre *
     \ let f=getfsize(expand("<afile>"))
     \ | if f > 100000 || f == -2
     \ | let b:copilot_enabled = v:false
     \ | endif

  " ------------ FZF -------------------
  " Customize fzf colors to match your color scheme
  " - fzf#wrap translates this to a set of `--color` options
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }

  " Set preview windows hidden by default, and shown with ctrl-p
  let g:fzf_preview_window = ['hidden', 'ctrl-p']

  " ------------ LSP -------------------
  " Set LSP options
  let lspOpts = #{
        \ aleSupport: v:true,
        \ autoComplete: v:false,
        \ autoHighlight: v:false,
        \ }

  autocmd User LspSetup call LspOptionsSet(lspOpts)

  " Add servers
  let lspServers = [#{
            \	  name: 'pythonlsp',
  	        \	  filetype: ['python'],
  	        \	  path: 'pylsp',
  	        \	  args: []
            \ }]
          
  autocmd User LspSetup call LspAddServer(lspServers)
 
  " Define some key mappings
  nnoremap <leader>ld :LspGotoDefinition<CR>
  nnoremap <leader>lr :LspShowReferences<CR>
  nnoremap <leader>lR :LspRename<CR>
  nnoremap <leader>l# :LspHighlight<CR>
  nnoremap <leader>lh :LspHover<CR>

  " Use <C-L> to clear highlight
  nnoremap <C-L> :nohl \| :LspHighlightClear <CR><C-L>

endif
